USE Lab_1
GO
CREATE TABLE PAGE_PROOFS(
  ID INTEGER PRIMARY KEY IDENTITY(1,1),
  "TYPE" VARCHAR(50) NOT NULL,
  CHECK(LEN("TYPE") > 0)
);
GO

INSERT INTO PAGE_PROOFS ("TYPE") VALUES('B')
GO

DELETE PAGE_PROOFS WHERE ID=1
GO

UPDATE PAGE_PROOFS SET "TYPE" = 'AASDA' WHERE ID = 1
GO

CREATE TRIGGER PAGE_PROOFS_TRIGGER_INSERT
ON PAGE_PROOFS
AFTER INSERT
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('PAGE_PROOFS', 'INSERT');
GO


CREATE TRIGGER PAGE_PROOFS_TRIGGER_UPDATE
ON PAGE_PROOFS
AFTER UPDATE
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('PAGE_PROOFS', 'UPDATE');
GO


CREATE TRIGGER PAGE_PROOFS_TRIGGER_DELETE
ON PAGE_PROOFS
AFTER DELETE
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('PAGE_PROOFS', 'DELETE');
GO

CREATE VIEW VW_PAGE_PROOFS
AS
SELECT ID, "TYPE"
FROM PAGE_PROOFS;
GO

CREATE PROCEDURE INSERT_PAGE_PROOFS
    @TYPE VARCHAR(50)
WITH RECOMPILE    
AS  
    BEGIN TRY
       INSERT INTO PAGE_PROOFS("TYPE") VALUES(@TYPE)
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH 
GO

CREATE PROCEDURE UPDATE_PAGE_PROOFS
    @ID INTEGER,
    @TYPE VARCHAR(50)
WITH RECOMPILE    
AS  
    BEGIN TRY
	IF @TYPE != '' AND @TYPE IS NOT NULL
       UPDATE PAGE_PROOFS SET "TYPE" = @TYPE WHERE ID = @ID
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE SELECT_PAGE_PROOFS
WITH RECOMPILE    
AS  
    BEGIN TRY
       SELECT * FROM VW_PAGE_PROOFS;
	   RETURN;
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE DELETE_PAGE_PROOGS
    @ID INTEGER
WITH RECOMPILE    
AS  
    BEGIN TRY
       DELETE PAGE_PROOFS WHERE ID = @ID
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO
