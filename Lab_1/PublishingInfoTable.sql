USE Lab_1
GO
CREATE TABLE PUBLISHING_INFO(
  ID INTEGER PRIMARY KEY IDENTITY(1,1),
  CIRCULATION INTEGER NOT NULL,
  "DATE" DATE NOT NULL,
  CHECK(CIRCULATION > 0),
  CHECK("DATE" > '1880/01/01' ),
  CHECK(CIRCULATION > 0)
);
GO

CREATE TRIGGER PUBLISHING_INFO_TRIGGER_INSERT
ON PUBLISHING_INFO
AFTER INSERT
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('PUBLISHING_INFO', 'INSERT');
GO

CREATE TRIGGER PUBLISHING_INFO_TRIGGER_UPDATE
ON PUBLISHING_INFO
AFTER UPDATE
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('PUBLISHING_INFO', 'UPDATE');
GO

CREATE TRIGGER PUBLISHING_INFO_TRIGGER_DELETE
ON PUBLISHING_INFO
AFTER DELETE
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('PUBLISHING_INFO', 'DELETE');
GO

CREATE PROCEDURE INSERT_PUBLISHING_INFO
    @CIRCULATION INTEGER,
	@DATE DATE
WITH RECOMPILE    
AS  
    BEGIN TRY
       INSERT INTO PUBLISHING_INFO(CIRCULATION, "DATE") VALUES(@CIRCULATION, @DATE)
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE UPDATE_PUBLISHING_INFO
    @ID INTEGER,
    @CIRCULATION INTEGER,
	@DATE DATE
WITH RECOMPILE    
AS  
    BEGIN TRY
	IF @CIRCULATION > 0 AND @CIRCULATION IS NOT NULL
	BEGIN
       UPDATE PUBLISHING_INFO SET CIRCULATION = @CIRCULATION WHERE ID = @ID
	END
	IF @DATE != '' AND @DATE IS NOT NULL
	BEGIN
       UPDATE PUBLISHING_INFO SET "DATE" = @DATE WHERE ID = @ID
	END
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE SELECT_PUBLISHING_INFO
WITH RECOMPILE    
AS  
    BEGIN TRY
       SELECT * FROM VW_PUBLISHING_INFO;
	   RETURN;
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE DELETE_PUBLISHING_INFO
    @ID INTEGER
WITH RECOMPILE    
AS  
    BEGIN TRY
       DELETE PUBLISHING_INFO WHERE ID = @ID
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO
 
CREATE VIEW VW_PUBLISHING_INFO
AS
SELECT ID, CIRCULATION, "DATE"
FROM PUBLISHING_INFO;

GO