USE Lab_1
GO
CREATE TABLE TYPOGRAPHY(
  ID INTEGER PRIMARY KEY IDENTITY(1,1),
 "NAME" VARCHAR(50),
 "LOCATION" VARCHAR(50),
 "QUALITY_ID" INTEGER,
  FOREIGN KEY ("QUALITY_ID") REFERENCES QUALITY(ID),
  CHECK(LEN("NAME") > 3),
  CHECK(LEN("LOCATION") > 10)
);
GO

INSERT INTO TYPOGRAPHY ("NAME", "LOCATION", "QUALITY_ID") VALUES('AXCV', 'SANASBDANSDBASD', 1)
GO

DELETE TYPOGRAPHY WHERE ID=1
GO

UPDATE TYPOGRAPHY SET "NAME" = 'AASDA' WHERE ID = 1
GO

SELECT * FROM ACTIONS_LOG
GO

CREATE TRIGGER TYPOGRAPHY_TRIGGER_INSERT
ON TYPOGRAPHY
AFTER INSERT
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('TYPOGRAPHY', 'INSERT');
GO


CREATE TRIGGER TYPOGRAPHY_TRIGGER_UPDATE
ON TYPOGRAPHY
AFTER UPDATE
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('TYPOGRAPHY', 'UPDATE');
GO


CREATE TRIGGER TYPOGRAPHY_TRIGGER_DELETE
ON TYPOGRAPHY
AFTER DELETE
AS
INSERT INTO ACTIONS_LOG (TABLE_NAME, ACTION_NAME) VALUES('TYPOGRAPHY', 'DELETE');
GO

CREATE VIEW VW_TYPOGRAPHY
AS
SELECT ID, "NAME", "LOCATION", "QUALITY_ID"
FROM TYPOGRAPHY;
GO

CREATE PROCEDURE INSERT_TYPOGRAPHY
    @NAME VARCHAR(50),
	@LOCATION VARCHAR(50),
	@QUALITY_ID INTEGER
WITH RECOMPILE    
AS  
    BEGIN TRY
       INSERT INTO TYPOGRAPHY("NAME", "LOCATION", "QUALITY_ID") VALUES(@NAME, @LOCATION, @QUALITY_ID)
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE UPDATE_TYPOGRAPHY
    @ID INTEGER,
    @NAME VARCHAR(50),
	@LOCATION VARCHAR(50),
	@QUALITY_ID INTEGER
WITH RECOMPILE    
AS  
    BEGIN TRY
	IF @NAME != '' AND @NAME IS NOT NULL
	BEGIN
       UPDATE TYPOGRAPHY SET "NAME" = @NAME WHERE ID = @ID
	END
    IF @LOCATION != '' AND @LOCATION IS NOT NULL
	BEGIN
       UPDATE TYPOGRAPHY SET "LOCATION" = @LOCATION WHERE ID = @ID
	END
	IF @QUALITY_ID > 0 AND @LOCATION IS NOT NULL
	BEGIN
       UPDATE TYPOGRAPHY SET QUALITY_ID = @QUALITY_ID WHERE ID = @ID
	END
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH 
GO

CREATE PROCEDURE SELECT_TYPOGRAPHY
WITH RECOMPILE    
AS  
    BEGIN TRY
       SELECT * FROM VW_TYPOGRAPHY;
	   RETURN;
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO

CREATE PROCEDURE DELETE_TYPOGRAPHY
    @ID INTEGER
WITH RECOMPILE    
AS  
    BEGIN TRY
       DELETE TYPOGRAPHY WHERE ID = @ID
    END TRY
	BEGIN CATCH
	   SELECT ERROR_MESSAGE() AS ERROR_MESSAGE;
	END CATCH
GO